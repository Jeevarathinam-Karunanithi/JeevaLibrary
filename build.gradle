// Copyright 2017 Google Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// [START gradle]
buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0' // If a newer version is available, use it

  }
}

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'java'
    id "com.moowork.node" version "1.3.1"
}


dependencyManagement {
    imports {
        mavenBom 'org.springframework:spring-framework-bom:5.1.9.RELEASE'
    }
}

repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
  }
  mavenCentral()
  jcenter()
}
apply plugin: "jacoco"
apply plugin: 'java'                              // standard Java tasks
apply plugin: "java-library"
apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'war'                               // standard Web Archive plugin
apply plugin: 'com.google.cloud.tools.appengine'  // App Engine task



dependencies {

  testImplementation 'junit:junit:4.12'
  compile 'com.google.appengine:appengine-api-1.0-sdk:+'  // Latest App Engine Api's
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
  

  compile 'jstl:jstl:1.2'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
  compile 'org.springframework.security:spring-security-crypto:4.0.2.RELEASE'

  

 

  api group: 'org.springframework', name: 'spring-webmvc', version: '5.0.7.RELEASE'

// Add your dependencies here.
//  compile 'com.google.cloud:google-cloud:+'   // Latest Cloud API's http://googlecloudplatform.github.io/google-cloud-java

  testCompile 'junit:junit:4.12'
  testCompile 'com.google.truth:truth:0.33'
  testCompile 'org.mockito:mockito-all:1.10.19'

  testCompile 'com.google.appengine:appengine-testing:+'
  testCompile 'com.google.appengine:appengine-api-stubs:+'
  testCompile 'com.google.appengine:appengine-tools-sdk:+'
  
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
  deploy {   // deploy configuration
    projectId = "jeevatraining12"
    version = '1'
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}

group   = "com.example.appenginej8"        // Generated output GroupId
version = "1.0-SNAPSHOT"       // Version in generated output



sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8
// [END gradle]


jacoco.toolVersion ='0.8.5'

jacocoTestReport {
      reports {
	      html.enabled =true
	      xml.enabled =true
      }

      afterEvaluate {
       classDirectories.setFrom(classDirectories.files.collect{
       	fileTree(dir: it, exclude : ['com/adaptavant/crm/controller/**'])
       })
      }
}

task copyKarmaConfiguration {

	group 'Library-app'
    description 'Copy karma configuration file to build folder'

	doFirst{
	
		copy {
	        from 'karma.conf.js'
	        into file("$project.buildDir")
    	}
	}
	
	dependsOn = ["explodeWar"]
}

task npmRunKarmaTests(type: NpmTask) {

	group 'Library-app'
    description 'Run JavaScript Tests via NPM (assumes karma configuration is set up)'

    args = ['run','runJSTests']
}

task runJavaScriptTests {

	group 'Library-app'
    description 'Prepare karma configuration and run JavaScript Tests'

	dependsOn = ["copyKarmaConfiguration", "npmRunKarmaTests"]
}

compileJava.dependsOn clean
test.finalizedBy jacocoTestReport